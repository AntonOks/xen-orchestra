'use strict'

const { createLogger } = require('@xen-orchestra/log')
const { parseVhdStream } = require('./parseVhdStream.js')
const { VhdDirectory } = require('./Vhd/VhdDirectory.js')
const { Disposable } = require('promise-toolbox')
const { asyncEach } = require('@vates/async-each')

const { warn } = createLogger('vhd-lib:createVhdDirectoryFromStream')

const buildVhd = Disposable.wrap(async function* (handler, path, inputStream, { concurrency, compression }) {
  const vhd = yield VhdDirectory.create(handler, path, { compression })
  const sizes = {
    compressedSize: 0,
    sourceSize: 0,
    writtenSize: 0,
  }
  const updateSums = ({ writtenSize, compressedSize, sourceSize }) => {
    sizes.writtenSize += writtenSize ?? 0
    sizes.compressedSize += compressedSize ?? 0
    sizes.sourceSize += sourceSize ?? 0
  }
  await asyncEach(
    parseVhdStream(inputStream),
    async function (item) {
      switch (item.type) {
        case 'footer':
          vhd.footer = item.footer
          break
        case 'header':
          vhd.header = item.header
          break
        case 'parentLocator':
          updateSums(await vhd.writeParentLocator({ ...item, data: item.buffer }))
          break
        case 'block':
          updateSums(await vhd.writeEntireBlock(item))
          break
        case 'bat':
          // it exists but  I don't care
          break
        default:
          throw new Error(`unhandled type of block generated by parser : ${item.type} while generating ${path}`)
      }
    },
    {
      concurrency,
    }
  )(await Promise.all([vhd.writeFooter(), vhd.writeHeader(), vhd.writeBlockAllocationTable()])).forEach(
    ([footer, header, bat]) => {
      updateSums(footer)
      updateSums(header)
      updateSums(bat)
    }
  )
  const vhdSize = vhd.streamSize()
  return {
    ...sizes,
    vhdSize,
  }
})

exports.createVhdDirectoryFromStream = async function createVhdDirectoryFromStream(
  handler,
  path,
  inputStream,
  { validator, concurrency = 16, compression } = {}
) {
  try {
    const sizes = await buildVhd(handler, path, inputStream, { concurrency, compression })
    if (validator !== undefined) {
      await validator.call(this, path)
    }
    return sizes
  } catch (error) {
    // cleanup on error
    await handler.rmtree(path).catch(warn)
    throw error
  }
}
